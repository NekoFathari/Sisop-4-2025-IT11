#include "image_transfer.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#define LOG_FILE "server.log"
#define DATABASE_FOLDER "database/"

void write_log(const char *source, const char *action, const char *info) {
    FILE *log = fopen(LOG_FILE, "a");
    if (!log) return;
    time_t now = time(NULL);
    struct tm *t = localtime(&now);
    char ts[64];
    strftime(ts, sizeof(ts), "%Y-%m-%d %H:%M:%S", t);
    fprintf(log, "[%s][%s]: [%s] [%s]\n", source, ts, action, info);
    fclose(log);
}

void decode_hex_reverse(const char *input, unsigned char *output, int *output_len) {
    int len = strlen(input);
    char reversed[len + 1];
    for (int i = 0; i < len; i++) reversed[i] = input[len - 1 - i];
    reversed[len] = '\0';

    int j = 0;
    for (int i = 0; i < len; i += 2) {
        char hex[3] = {reversed[i], reversed[i+1], '\0'};
        output[j++] = (unsigned char)strtol(hex, NULL, 16);
    }
    *output_len = j;
}

char **decrypt_1_svc(char **argp, struct svc_req *rqstp) {
    static char *result;
    static char filename[256];
    static unsigned char decoded[4096];
    int decoded_len = 0;

    write_log("Client", "DECRYPT", "Text data");

    decode_hex_reverse(*argp, decoded, &decoded_len);

    time_t now = time(NULL);
    snprintf(filename, sizeof(filename), "%s%ld.jpeg", DATABASE_FOLDER, now);
    FILE *fp = fopen(filename, "wb");
    if (fp) {
        fwrite(decoded, 1, decoded_len, fp);
        fclose(fp);
    }

    write_log("Server", "SAVE", filename + strlen(DATABASE_FOLDER));
    result = filename + strlen(DATABASE_FOLDER);
    return &result;
}

char **download_1_svc(char **argp, struct svc_req *rqstp) {
    static char *result;
    static char buffer[4096];
    static char filepath[256];

    write_log("Client", "DOWNLOAD", *argp);
    snprintf(filepath, sizeof(filepath), "%s%s", DATABASE_FOLDER, *argp);
    FILE *fp = fopen(filepath, "rb");
    if (!fp) {
        result = "ERROR: File not found";
        return &result;
    }

    int len = fread(buffer, 1, sizeof(buffer), fp);
    fclose(fp);

    static char hexresult[8192];
    for (int i = 0; i < len; i++) {
        sprintf(&hexresult[i * 2], "%02x", (unsigned char)buffer[i]);
    }
    result = hexresult;

    write_log("Server", "UPLOAD", *argp);
    returnÂ &result;
}
